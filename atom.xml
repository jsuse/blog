<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.arn0.org</id>
    <title>Arn0&apos;s Blog</title>
    <updated>2021-03-03T05:25:19.794Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.arn0.org"/>
    <link rel="self" href="https://blog.arn0.org/atom.xml"/>
    <logo>https://blog.arn0.org/images/avatar.png</logo>
    <icon>https://blog.arn0.org/favicon.ico</icon>
    <rights>All rights reserved 2021, Arn0&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[2020 World Error Responses]]></title>
        <id>https://blog.arn0.org/post/2020-server-error-responses/</id>
        <link href="https://blog.arn0.org/post/2020-server-error-responses/">
        </link>
        <updated>2020-12-31T04:29:32.000Z</updated>
        <content type="html"><![CDATA[<p>魔幻的2020已经到了尾声，今年发生的事情看起来就像是反乌托邦小说的内容，年初Covid-2019的全球大流行给全球的经济带来剧烈震荡，也带走了李文亮这个最优秀的眼科医生。在这个朋克风格的一年，不知不觉又大了一岁，博客也半年多没有打理了，今年实在是太<s>懒</s>忙<s>着睡觉</s>了。</p>
<h1 id="一些牢骚话">一些牢骚话</h1>
<p>这一年除了年初因为疫情停工的2个月，几乎没有沉下心来写东西，视力也越来越差。在单位里是一个人当两个用，╮(╯_╰)╭二线城市小公司实在是一言难尽。幸好积蓄还是有那么一点，投了点理财也买了些基金，希望30岁前能财务自由吧。</p>
<h1 id="新年计划">新年计划</h1>
<p>蛤？不存在的，反正~~写了也没用，~~该实现的自然就会实现。¯_(ツ)_/¯</p>
<p><s>疫情快点结束啊😭</s></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[书摘 | 《社会契约论》第十章 论政府的滥用权力和衰退的倾向]]></title>
        <id>https://blog.arn0.org/post/The-Social-Contract-chapter10/</id>
        <link href="https://blog.arn0.org/post/The-Social-Contract-chapter10/">
        </link>
        <updated>2020-05-29T03:27:06.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>Arn0注：这本258年前出版的书至今依旧具有启发意义，下文是全文摘录。题外话：据说<a href="https://k.sina.cn/article_2606218210_9b57bbe2019001q15.html">他看过这本书</a>。不管你信不信，反正我是信了。</p>
</blockquote>
<p>正如个体意志总是反抗公共意志，政府始终蕴含着一股与主权者相左的力。这一力量越增长，国家体制就越变质，由于这里再也没有其他反对君主意志的团体意志能够与之相抗衡，君主或早或迟都将压制主权者，摧毁社会契约。这一内在固有的缺陷自政治体诞生之日起便无法避免地将政治体引向毁灭，就像衰老和死亡终将摧毁人的肉体一样。</p>
<p>政府腐化变质主要有两条基本途径，其一是政府收缩，其二是国家解体。</p>
<p>政府的成员数量由多变少时，也就是从民主制向贵族制过渡，再从贵族制向君主制过渡时，政府就发生了收缩。这是其自然的趋势（威尼斯共和国在一湾海港中逐渐形成和发展的过程，就是这种自然趋势的清晰例证；一千二百多年以来，威尼斯人似乎还只停留在1198年塞拉蒂·康西里奥Serrardi Consiglio开创的第二个阶段，这着实令人讶然。</p>
<p>至于为人所诟病的古代大公，无论《Squitinio della liverta veneta》（威尼斯自由论）这本书里是如何记载的，这些大公绝不属于主权者，这一点明确无误。</p>
<p>一定会有人以罗马共和国为例来反驳我，他们会说，罗马共和国经历的是一个完全相反的进程，从国君制过渡到贵族制，又从贵族制过渡到民主制。但我的看法却与此大相径庭。罗慕路斯最初创立的是一个混合政府，这个混合政府之后迅速退化成为专制政府。出于某些特殊原因，这个国家过早地夭亡了，正如新生儿未及成年就死去一样。塔奎尼乌斯/塔尔干王朝被驱逐之时，才是共和国真正诞生的时刻。但是罗马共和国当初没能采取稳定的形式，罗马人只完成了全部工作一半的进度—他们没有消灭贵族。因为合法的行政制度之中最糟糕的那一种，即世袭的贵族政府，一直与民主制有所冲突；所以政府的形式也总在变动不止。并且，正如马基雅维利所论证的那样，罗马政府直到设立了护民官制才固定下来，唯有到此时才有了真正的政府和真正的民主制。事实上，此时人民不仅是主权者，同时也是行政官和司法官；元老院只不过是一个用以缓冲或集中政府权力的略低一级的执政会议罢了；而执政官本人，尽管是贵族出身，尽管高居首席行政官之位，尽管是战时的绝对统帅，但是在罗马，也不过是人民的主席而已。自此之后，我们便看到，罗马政府出于其天然的倾向，强烈地趋向于贵族制。贵族似乎自己消灭了自己，于是贵族制也就不复存在于贵族主体之中，就像我们在威尼斯和热那亚所看到的那样。贵族制转而存在于由贵族和平民组成的元老院主体内。称呼本身并不会改变事物的本质，当人民有了为他们而统治的首领时，无论这些首领的头衔是什么，那就总归是贵族制。贵族制的滥用职权导致了内战与三雄政治：苏拉、恺撒和奥古斯都事实上已经成为了真正的国军。最后，在提比略Tiberius Claudius Nero的专制统治下，国家终于解体。因此，罗马的历史完全不能驳倒我的原则，反而证实了我的论点。）。</p>
<p>如果反过来从小到大变化，那就可以说政府在松弛。但这种反向的发展是不可能的。 事实上，政府从来都只有在其活力衰减到无以为继时才会改变形式。假如政府在收缩自身规模的同时还在扩展疆域，其力量将会变得毫无意义，更无法继续生存下去。因此，需要回溯到源头，根据政府损耗的幅度将活力的弹簧收紧，否则政府所维系的国家将会轰然崩塌。 国家的解体可能通过两种方式进行。 第一种方式，当君主不再依法支配国家而开始滥用主权权力时，就会发生一个明显的重大变化，收缩的不再是政府，而是国家。我的意思是，大国将会解体，并在其内部形成一个新的国家，而新的国家仅仅由政府成员组成，对其他人民而言只起到主宰和暴君的角色。由此可见，一旦政府开始滥用主权者的权力，社会契约便被打破，所有的普通公民便回到天然自由的状态，他们不再受到义务约束而服从，而是受强力所迫不得不服从。</p>
<p>当政府成员滥用了本应由政府作为主体予以执行的职权时，也会出现同样的情况。这不是微不足道的违法行为，而是会造成大规模的混乱。在这种情况下，可以说有多少行政官就可能有多少君主，而国家也会像在前一种情况中一样支离破碎，随之消亡或改变形态。 当国家解体时，滥用权力的政府，不管之前是何种形式，此时都统称为无政府状态。具体说来，民主政府会沦为群氓统治，贵族政府会沦为寡头政治。还可以补充一种，即君主政体会退化为暴君政治（僭主政治），但最后这个术语含义模糊，需要解释说明。 从一般意义上说，暴君就是以暴力手段进行统治，罔顾正义和法律的君主。从更精确意义上说，暴君是窃夺其本身无权拥有的皇权权威的个人。古希腊人便是从这一意义上以“暴君”一词描述非法登基的国王的，只要君主的权力不合法（Omnes enim et habentur et dicuntur tyranni，qui postestate utuntur perpetua in ea civitate livertate usa est.凡是在一个习惯于自由的国度里永远当权的人，就会被人称作或视为暴君。诚然，亚里士多德曾经对暴君与国王做出过区分，前者是为了自身利益而统治，后者则是为了臣民的利益而统治。但是所有的古希腊作家一般都是在另外一层含义上使用暴君这个名词，尤其像色诺芬所刻画的希罗那样。此外，从亚里士多德的这一区分还可以推论出，自从世界开辟以来，还不曾有过一位真正的国王呢。），他们就将这个词不加区别地用于好的和坏的君主。因此，从这一角度上说，暴君和篡权者是完全同义的两个词语。 为了给不同事物不同的名称，我将篡夺皇权权威者称为暴君，将篡夺主权权力者称为独裁者（despote）。暴君违反的是依法统治的法律；独裁者则是将自己凌驾于法律之上。这样一来，暴君未必是独裁者，但独裁者一定是暴君。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[记 | 修复Jsdelivr静态资源]]></title>
        <id>https://blog.arn0.org/post/fix_Jsdelivr_res/</id>
        <link href="https://blog.arn0.org/post/fix_Jsdelivr_res/">
        </link>
        <updated>2020-05-19T15:34:40.000Z</updated>
        <summary type="html"><![CDATA[<p>今天没事上自己博客看了下，却发现静态资源全部阵亡。</p>
]]></summary>
        <content type="html"><![CDATA[<p>今天没事上自己博客看了下，却发现静态资源全部阵亡。</p>
<!-- more -->
<p><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/nores_mainpage.webp" alt="" loading="lazy"><br>
首页成了这个样子......</p>
<p>F12一看，一大片齐刷刷的404。<br>
<s>【场面过于血腥，不予展示】</s><br>
<img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master//img/loadresfild.webp" alt="" loading="lazy"><br>
这一看就是文件找不到了</p>
<h2 id="咋回事啊">咋回事啊？</h2>
<p>因为我的静态资源全部托管在Github仓库上，由Jsdelivr提供CDN服务。资源加载失败也许和Github有关，所以就先上Github看看是不是Github官方对我的仓库下手了。<br>
<img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master//img/res_github.webp" alt="" loading="lazy"><br>
这一看，还好，仓库还在。</p>
<p>那我就很纳闷了，东西都没动过，不可能会出现这样的情况啊。我就在想是不是Jsdelivr不再给Github仓库提供CDN加速服务了？<br>
<img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master//img/other_userBlog_res.webp" alt="" loading="lazy"></p>
<center>正常加载</center><br />
<p>上面的是<a href="https://bili33.top">别人的博客</a>，很明显，答案是否定的，因为人家的资源一样是托管在Github上面，用Jsdelivr加速，却没有任何问题。</p>
<p>后来发现是Jsdelivr链接格式发生了改变：</p>
<p>以前是<code>https://cdn.jsdelivr.net/gh/&lt;username&gt;/&lt;repo-name&gt;@&lt;branch&gt;/&lt;path&gt;</code><br>
仓库名后面跟的是分支。</p>
<p>现在是<code>https://cdn.jsdelivr.net/gh/&lt;username&gt;/&lt;repo-name&gt;@&lt;version&gt;/&lt;path&gt;</code><br>
仓库名后面跟的是版本。</p>
<h2 id="那咋整啊">那咋整啊？</h2>
<p>知道了问题所在，那就好处理了。先发布一个master版本。</p>
<p>Q：为什么是master？</p>
<p>A：因为如果你之前是直接使用master分支作为仓库文件的存取路径的话，在发布master版本后，Jsdelivr那边就可以根据原地址直接读取出来。</p>
<p>至于想发像<code>1.0.0</code>这样的版本号也是可以的，不过在发布之后，需要批量修改现有的链接，否则一个文件都加载不出来。</p>
<h3 id="发布一个版本">发布一个版本</h3>
<p><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/in_releases.webp" alt="" loading="lazy"><br>
进入Release页面<br>
<img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/creat_release.webp" alt="" loading="lazy"><br>
发布master版本<br>
<img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/save_master_version.webp" alt="" loading="lazy"><br>
发布后，刷新首页。<br>
<img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/screenshot_20200520_004823.webp" alt="" loading="lazy"></p>
<center>一切正常</center><br />
<blockquote>
<p>话说我之前还给<a href="https://foreverblog.cn/treaty.html">十年之约项目组</a>提交了两次链接，两次都打回来了，也许就是因为这个原因。明明提交之前还看了下确认没有加载问题后才发的，但我却偏偏忘了清空浏览器缓存，以为一切正常就发了过去，丢人啊QAQ。</p>
</blockquote>
<blockquote>
<p>5月21日更新：</p>
</blockquote>
<p>如果根据上面的方法新增了<code>master</code>tag，那么Push master分支到仓库时会出现以下情况：</p>
<pre><code>error: src refspec master matches more than one
error: failed to push some refs to 'https://github.com/arn0note/***.git'
</code></pre>
<p>我的解决方法是删除<code>master</code>tag：</p>
<pre><code>git tag -d master
</code></pre>
<p>就酱。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【伪开箱】 WIFI版小米智能插座]]></title>
        <id>https://blog.arn0.org/post/【伪开箱】 WIFI版小米智能插座/</id>
        <link href="https://blog.arn0.org/post/【伪开箱】 WIFI版小米智能插座/">
        </link>
        <updated>2020-04-25T10:09:28.000Z</updated>
        <summary type="html"><![CDATA[<p>上周花费50元的惨重代价入了个小米智能插座（WIFI版），幸好善良的京东给予了我0.01元巨额补贴（随即立减99元）。不过有一说一，京东的物流速度一如既往快的让人没话说，下单第二天就送到了。</p>
<p>没有开箱图，因为没有箱：）来张全家福把。</p>
]]></summary>
        <content type="html"><![CDATA[<p>上周花费50元的惨重代价入了个小米智能插座（WIFI版），幸好善良的京东给予了我0.01元巨额补贴（随即立减99元）。不过有一说一，京东的物流速度一如既往快的让人没话说，下单第二天就送到了。</p>
<p>没有开箱图，因为没有箱：）来张全家福把。</p>
<!--more-->
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/IMG_20200425_224846.webp" alt="" loading="lazy"></figure>
<p>爪机拍摄，凑合看吧......</p>
<p>不过需要注意的是最大电流只支持10A，所以基本上与空调、热水器无缘了。</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/20200426022956.webp" alt="" loading="lazy"></figure>
<p>我嘛主要是买来控制床头灯的，所以对功率限制不怎么感冒。现在设置了定时，到点了就关灯睡觉。智能插座成了规律作息的第一步。</p>
<p>看了下说明书</p>
<figure data-type="image" tabindex="3"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/img_20200426_011110.082.webp" alt="" loading="lazy"></figure>
<p>嗯，还挺简单。</p>
<p>正当我老实地按照说明书上的指示连路由器的时候，我被卡在了第二步。</p>
<p>往下划拉一看，突然醒悟！怪不得扫不到，原来压根就没有这产品，这能扫到就有鬼了。<br>
<img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/S00421-231915.webp" alt="" loading="lazy"><br>
后来我细想，会不会是产品图片搞错了？于是将3个智能插座逐个点开都试了遍，发现全都没有鸟用。我就心想是不是除了WIFI要开外，还要开GPS、蓝牙？于是乎又试了一遍。</p>
<p>不过，事实证明我还是Too young，问题依旧。我就奇了怪了，该开的全都开了，不明真相的我百思不得其解。于是找了下售后客服。于是有了以下对话：</p>
<figure data-type="image" tabindex="4"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/screenshot_20200421-034911.webp" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/screenshot_20200421-034925.webp" alt="" loading="lazy"></figure>
<p>看她态度那么诚恳，于是我信了这个客服的话。过了一会，我就觉得有点不对劲了，我就在想：连个WIFI还需要连接你小米的服务器？（后来证实了是真的要连，但和这个问题无关，接下来会讲到。）我就不信只有我一个人碰到了这个问题，我要看看其他人是怎么骂你们的。</p>
<p>于是乎我翻了下差评，骂人的没找到，但找到了条有用的：</p>
<figure data-type="image" tabindex="6"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/screenshot_20200421-035108.webp" alt="" loading="lazy"></figure>
<p>卧槽，我被坑了。原来问题是“系统语言设置成英语就扫描不到设备”。看了下评价时间，猛然发现这个问题原来已经拖了大半年了。更有趣的是评价下方的留言，人家指出APP问题，他好像吃了苍蝇一样难受。</p>
<p>对了，这条评价下还有售后客服留言：<br>
<img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/screenshot_20200421-035121.webp" alt="" loading="lazy"></p>
<p>这回答......我的尴尬症都犯了，人家压根都没有说是产品质量问题。</p>
<p>而且都将问题描述得那么清楚了，不会是看不懂人家说的是什么吧。</p>
<figure data-type="image" tabindex="7"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/wtf.webp" alt="" loading="lazy"></figure>
<p>于是我选择相信这位投了差评的老哥，将系统语言设置成中文，清除应用数据后重新登陆。一轮操作后设备扫描一扫就扫到了，问题瞬间解决。</p>
<hr>
<p>接下来的操作就有如行云流水了：</p>
<h3 id="连接过程">连接过程</h3>
<p>长按插座下方的按钮，持续5秒，插座闪黄灯</p>
<figure data-type="image" tabindex="8"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/IMG_20200425_225250.webp" alt="" loading="lazy"></figure>
<h4 id="首页点击号">首页点击+号</h4>
<figure data-type="image" tabindex="9"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/1.webp" alt="" loading="lazy"></figure>
<h4 id="点击扫描图标">点击扫描图标</h4>
<figure data-type="image" tabindex="10"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/2.5.webp" alt="" loading="lazy"></figure>
<p>成功发现设备</p>
<h4 id="连接wifi">连接WIFI</h4>
<figure data-type="image" tabindex="11"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/4.webp" alt="" loading="lazy"></figure>
<h4 id="开始传输数据">开始传输数据</h4>
<p>挂了梯子的，这里注意一定要先把梯子关掉，不然会导致数据发送失败。</p>
<figure data-type="image" tabindex="12"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/5.webp" alt="" loading="lazy"></figure>
<h4 id="最后设置下名称">最后设置下名称</h4>
<figure data-type="image" tabindex="13"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/6.webp" alt="" loading="lazy"></figure>
<p>设置完后，这里还可以通过小爱同学控制，不过我没试过。</p>
<figure data-type="image" tabindex="14"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/20200426002732.webp" alt="" loading="lazy"></figure>
<h4 id="添加完成">添加完成</h4>
<figure data-type="image" tabindex="15"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/7.webp" alt="" loading="lazy"></figure>
<h5 id="这时插座的灯已经时蓝色的了">这时插座的灯已经时蓝色的了</h5>
<figure data-type="image" tabindex="16"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/10.webp" alt="" loading="lazy"></figure>
<h4 id="设置定时">设置定时</h4>
<figure data-type="image" tabindex="17"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/8.webp" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="18"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/9.webp" alt="" loading="lazy"></figure>
<h4 id="搞定">搞定</h4>
<p>整个连接过程没啥好说的，简单易懂。不过就是有个地方不爽，这玩意连局域网控制都没有，断网时还不能使用之前预先设定好的定时。我心想这一旦断网，这智能设备不就成了智障设备了吗？</p>
<p>今天早上刷了下酷安，发现一条评论：</p>
<p><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/screenshot_20200425-111611.webp" alt="" loading="lazy"><br>
<img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/screenshot_20200425-111629.webp" alt="" loading="lazy"></p>
<p>果然有人想的跟我一样，不过就是有一点出乎我的意料，原来之前是可以通过局域网控制的，是后来才被下线，从而变得不支持局域网控制。</p>
<p>我寻思这不就是倒车吗？</p>
<figure data-type="image" tabindex="19"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/img/Astern.webp" alt="" loading="lazy"></figure>
<p>至于继电器粘连的问题，在工业界是老生常谈的问题，记得以前在学PLC的时候就遇到过一次，一个输出端口老是处在连通的状态，害得我以为是程序的问题Debug了半天QAQ。</p>
<p>小米自家的产品Zigbee版的智能插座上也出现过，不过我只找到了一例(<a href="https://www.xiaomi.cn/post/3310812">我买的zigbee的插座好像坏了</a>)，可能是小概率事件。不知道是不是因为继电器串接的电阻质量不行，阻值太小导致的。</p>
<p>不过在网上查了一圈，没发现这个WIFI版的出现过这种问题，应该是可以放心用的。</p>
<p>关于防止继电器粘连，知乎上有个<a href="https://www.zhihu.com/question/265808055/answer/431622256">提问</a>提到了这个问题，有兴趣的推荐看下Patrick Zhang（张工）的回答。</p>
<h2 id="总结一下">总结一下</h2>
<p>功能方面没啥花样，定时+手动控制电源通断，也可以通过小爱同学控制，但一断网就立马罢工。最大电流仅支持10A，不能控制大功率电器，直接与空调、热水器说拜拜。</p>
<p>价格方面，49块钱就可以搞到手，价格还行，有兴趣的可以<a href="https://item.jd.com/100003180749.html">去京东</a>看看。更便宜的同类产品也有，不过我就不敢买了，主要是怕邻居看到免费烟花。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为页面添加COVID-19疫情地图]]></title>
        <id>https://blog.arn0.org/post/page-add-covid-19-map/</id>
        <link href="https://blog.arn0.org/post/page-add-covid-19-map/">
        </link>
        <updated>2020-04-14T10:08:25.000Z</updated>
        <summary type="html"><![CDATA[<p>看到<a href="https://idealclover.top/archives/617/">翠翠的博客</a>刚刚发了这篇文章，看起来挺容易搞的，于是就折腾了起来。地图看起来挺不错，可以很清楚地看到各地区的疫情数字。</p>
]]></summary>
        <content type="html"><![CDATA[<p>看到<a href="https://idealclover.top/archives/617/">翠翠的博客</a>刚刚发了这篇文章，看起来挺容易搞的，于是就折腾了起来。地图看起来挺不错，可以很清楚地看到各地区的疫情数字。</p>
<!--more-->
<p>下面是预览：</p>
<iframe src="https://www.lovestu.com/api/project/cnmapyinqing/obj.php" height="500" frameborder="no" border="0" width="100%"> </iframe>
<p>正如翠翠所说，<a href="https://www.ghpym.com/2020cnyqt.html">果核剥壳</a>已经将部署流程写得很清楚了。</p>
<p>相关代码作者已经做成组件，直接贴到页面上就可以直接调用。</p>
<pre><code class="language-html">&lt;iframe src=&quot;https://www.lovestu.com/api/project/cnmapyinqing/obj.php&quot; height=&quot;500&quot; frameborder=&quot;no&quot; border=&quot;0&quot; width=&quot;100%&quot;&gt; &lt;/iframe&gt;
</code></pre>
<p>可以通过<code>height</code>和<code>width</code>调整尺寸，我这里的话没啥好改的，直接就是默认尺寸。</p>
<p>另外据说数据来源是丁香园，每小时更新。而地图来自<a href="https://www.highcharts.com.cn/docs/highmaps-started">Highmaps</a>也是个做数据可视化的神器。想要的可以直接复制粘贴走起。</p>
<p>不过啊，如果没有这波疫情，世界又会怎么发展呢？<br>
或许这个地图根本就不会诞生，但是很多悲剧就可以避免吧。</p>
<hr>
参考：
<p><a href="https://idealclover.top/archives/617/">为博客添加COVID-19疫情地图</a><br>
<a href="https://www.ghpym.com/2020cnyqt.html">中国疫情地图和全球疫情地图组件，一句话调用</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Halo主题定制——寒山启用DisqusJS]]></title>
        <id>https://blog.arn0.org/post/Halo主题定制——寒山启用DisqusJS/</id>
        <link href="https://blog.arn0.org/post/Halo主题定制——寒山启用DisqusJS/">
        </link>
        <updated>2020-04-12T10:06:01.000Z</updated>
        <summary type="html"><![CDATA[<p>寒山是我迁移到Halo后用的第二款主题（第一款当然就是Halo自带的Anatole啦），也是我目前为止最满意的一款主题。只是美中不足的是这款主题不支持DisqusJS，有点不习惯，于是乎就搞上了这玩意。</p>
]]></summary>
        <content type="html"><![CDATA[<p>寒山是我迁移到Halo后用的第二款主题（第一款当然就是Halo自带的Anatole啦），也是我目前为止最满意的一款主题。只是美中不足的是这款主题不支持DisqusJS，有点不习惯，于是乎就搞上了这玩意。</p>
<!--more-->
<p>这里说的主题是寒山的<a href="https://github.com/halo-dev/halo-theme-hshan/releases/download/v1.4.3/hshan.zip">v1.4.3</a></p>
<p>项目主页在<a href="https://github.com/halo-dev/halo-theme-hshan">这里</a></p>
<h2 id="首先为评论插件创建dsqjs对象">首先为评论插件创建dsqjs对象</h2>
<p>将<code>module/comment.ftl</code>原本的<code>&lt;script&gt;</code>和<code>&lt;/script&gt;</code>标签之间的内容全部注释或者删掉，然后创建<code>loadDisqusJS()</code>函数，并通过<code>setTimeout</code>延时调用<code>loadDisqusJS()</code>函数。</p>
<p>修改后如下</p>
<pre><code class="language-javascript">&lt;#macro comment target,type&gt;
	&lt;#if !post.disallowComment!false&gt;
	&lt;!-- DisqusJS jsDelivr --&gt;
	&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css&quot;&gt;
	&lt;script src=&quot;https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js&quot;&gt;&lt;/script&gt;
		&lt;script&gt;
		function loadDisqusJS() {
			var dsqjs = new DisqusJS({
				shortname: '',
				siteName: '',
				identifier: document.location.origin + document.location.pathname + document.location.search,
				url: document.location.origin + document.location.pathname + document.location.search,
				title: document.title,
				api: '',
				apikey: '',
				admin: '',
				adminLabel: ''
				});
			}
        	setTimeout(function(){ loadDisqusJS(); }, 2000);
		&lt;/script&gt;
      	&lt;div id=&quot;disqus_thread&quot; style=&quot;margin: 30px;&quot;&gt;&lt;/div&gt;
	&lt;/#if&gt;
&lt;/#macro&gt;
</code></pre>
<p>其中<code>disqus_thread</code>容器的位置决定了Disqus/DisqusJS出现的位置。</p>
<p>至于<code>margin</code>嘛，可以换其他数值，数值越大，评论框旁边的空隙就越大，评论框自然就越小，可以通过这种办法控制评论框大小。</p>
<p>这上面的代码还引入了DisqusJS的资源，不过这些没啥介绍的，我就不多说了。</p>
<h3 id="下面是需要配置的内容">下面是需要配置的内容</h3>
<p>这个我是直接在<a href="https://github.com/SukkaW/DisqusJS">DisqusJS项目主页</a>剽窃的（小声）</p>
<p><strong>shortname</strong> <code>{string}</code></p>
<ul>
<li>你的 Disqus Forum 的 shortname，你可以在 <a href="https://disqus.com/admin/settings/general/">Disqus Admin - Settings - General - Shortname</a> 获取你的 shortname</li>
<li><strong>必须</strong>，无默认值</li>
</ul>
<p><strong>siteName</strong> <code>{string}</code></p>
<ul>
<li>你站点的名称，将会显示在「评论基础模式」的 header 中；该配置应该和 <a href="https://disqus.com/admin/settings/general/">Disqus Admin - Settings - General - Website Name</a> 一致</li>
<li>非必须，无默认值</li>
</ul>
<p><strong>identifier</strong> <code>{string}</code></p>
<ul>
<li>当前页面的 identifier，用来区分不同页面</li>
<li><strong>建议</strong>，默认值为 <code>document.location.origin + document.location.pathname + document.location.search</code></li>
</ul>
<p><strong>url</strong> <code>{string}</code></p>
<ul>
<li>当前页面的 URL，Disqus 的爬虫会爬取该 URL 获取页面相关信息</li>
<li><strong>建议</strong>，默认值为 <code>document.location.origin + document.location.pathname + document.location.search</code></li>
</ul>
<p><strong>title</strong> <code>{string}</code></p>
<ul>
<li>当前页面的标题，如果没有设置默认为当前页面的标题。当页面标题中有其他信息（比如站点名称）而不想在 Disqus 中展示时，可以设置此项。</li>
<li>非必须，默认值为 <code>document.title</code></li>
</ul>
<p><strong>api</strong> <code>{string}</code></p>
<ul>
<li>DisqusJS 请求的 API Endpoint，通常情况下你应该配置一个 Disqus API 的反代并填入反代的地址。你也可以直接使用 DISQUS 官方 API 的 Endpoint <code>https://disqus.com/api/</code>，或是使用我搭建的 Disqus API 反代 Endpoint <code>https://disqus.skk.moe/disqus/</code>。如有必要可以阅读关于搭建反代的 <a href="https://github.com/SukkaW/DisqusJS#%E8%B0%83%E8%AF%95%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8--%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3">相关内容</a></li>
<li><strong>建议</strong>，默认值为 <code>https://disqus.skk.moe/disqus/</code></li>
</ul>
<p><strong>apikey</strong> <code>{string || Array}</code></p>
<ul>
<li>DisqusJS 向 API 发起请求时使用的 API Key，你应该在配置 Disqus Application 时获取了 API Key</li>
<li>DisqusJS 支持填入一个 包含多个 API Key 的 Array，在每次请求时会随机使用其中一个；如果你只填入一个 API Key，可以填入 string 或 Array。</li>
<li><strong>必填</strong>，无默认值</li>
</ul>
<hr>
<p>以下配置和 Disqus Moderator Badge 相关，缺少一个都不会显示 Badge</p>
<p><strong>admin</strong> <code>{string}</code></p>
<ul>
<li>你的站点的 Disqus Moderator 的用户名（也就是你的用户名）。你可以在 <a href="https://disqus.com/home/settings/account/">Disqus - Settings - Account - Username</a> 获取你的 Username</li>
<li>非必须，无默认值</li>
</ul>
<p><strong>adminLabel</strong> <code>{string}</code></p>
<ul>
<li>你想显示在 Disqus Moderator Badge 中的文字。该配置应和 <a href="https://disqus.com/admin/settings/community/">Disqus Admin - Settings - Community - Moderator Badge Text</a> 相同</li>
<li>非必须，无默认值</li>
</ul>
<hr>
<p>你看，到这里基本上是可以使用了。<br>
<img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/static_files/Disqus_Done.webp" alt="Disqus_Done" loading="lazy"></p>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/static_files/Disqus_sun_Done.webp" alt="Disqus_Done" loading="lazy"></figure>
<p>但如果你开启了全站PJAX，你会惊奇的发现，评论框在切换页面时并不会刷新。怎么办呢？<s>难道只能关掉PJAX了吗？</s></p>
<h2 id="pjax支持">PJAX支持</h2>
<p>我们可以在<code>module/script.ftl</code>增加刷新的内容<br>
找到<code>// 重新加载 评论</code>那一部分代码，将以下内容全部注释或删掉</p>
<pre><code class="language-javascript">// 重新加载 评论
$('script[data-pjax-comment]').each(function () {
	$(this).parent().append($(this).remove());
});

if ($(&quot;#page&quot;).find('.post-page').length &gt; 0) {
	window.removeEventListener('scroll', post.tocScroll, false);
</code></pre>
<p>上面这些代码原本是为原生评论系统服务的，目的就是为了在PJAX刷新时可以自动重载评论框。</p>
<p>当然我们使用DisqusJS的话那就用不着上面这些代码了，直接调用一个函数就够了</p>
<pre><code class="language-javascript">loadDisqusJS();
</code></pre>
<p>修改后的<code>module/script.ftl</code>如下</p>
<pre><code class="language-html">&lt;#include &quot;mermaid.ftl&quot;&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;${theme_base!}/assets/media/scripts/plugins.min.js?ver=${.now?long}&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;${theme_base!}/assets/media/scripts/main.min.js?ver=${.now?long}&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/npm/velocity-animate@1.5.2/velocity.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/npm/velocity-animate@1.5.2/velocity.ui.min.js&quot;&gt;&lt;/script&gt;
&lt;#if settings.auto_night_mode&gt;
    &lt;script src=&quot;//cdn.jsdelivr.net/gh/hshanx/halo-comment-normal@v1.0.0/dist/halo-comment.min.js&quot;&gt;&lt;/script&gt;
&lt;#else&gt;
    &lt;script src=&quot;${options.comment_internal_plugin_js!'//cdn.jsdelivr.net/gh/hshanx/halo-comment-normal@v1.0.0/dist/halo-comment.min.js'}&quot;&gt;&lt;/script&gt;
&lt;/#if&gt;

&lt;#if settings.Aplayer?? &amp;&amp; settings.Aplayer != ''&gt;
    &lt;script src=&quot;//cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;//cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&quot;&gt;&lt;/script&gt;
&lt;#else&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        // Smooth scroll to anchors
        var scroll = new SmoothScroll('[data-scroll]', {
            speed: 300,
            updateURL: false,
        })
    &lt;/script&gt;
&lt;/#if&gt;

&lt;#-- 暗夜模式 --&gt;
&lt;#if settings.auto_night_mode!true&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        var nightModeStartTime = ${settings.night_mode_start_time?default('18')};
        var nightModeEndTime = ${settings.night_mode_end_time?default('6')};
    &lt;/script&gt;
    &lt;script src=&quot;${theme_base!}/assets/media/scripts/night-mode.min.js?ver=${.now?long}&quot;&gt;&lt;/script&gt;
&lt;/#if&gt;

&lt;#if settings.visit_statistics!false&gt;
    &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;
&lt;/#if&gt;

&lt;#-- katex--&gt;
&lt;#if settings.enabled_mathjax!true&gt;
    &lt;script defer src=&quot;//cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.js&quot;&gt;&lt;/script&gt;
    &lt;script defer src=&quot;//cdn.jsdelivr.net/npm/katex@0.11.1/dist/contrib/auto-render.min.js&quot;
            onload=&quot;if (document.getElementById('post-content') ) {renderMathInElement(document.getElementById('post-content'),katex_config)}&quot;&gt;&lt;/script&gt;
&lt;/#if&gt;

&lt;#-- gallery  --&gt;
&lt;#--&lt;script src=&quot;//cdn.jsdelivr.net/npm/lightgallery@1.6.8/dist/js/lightgallery.min.js&quot;&gt;&lt;/script&gt;--&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/npm/justifiedGallery@3.7.0/dist/js/jquery.justifiedGallery.min.js&quot;&gt;&lt;/script&gt;
&lt;!--图片预览插件--&gt;
&lt;script data-pjax-viewer src=&quot;//cdn.jsdelivr.net/npm/viewerjs@1.5.0/dist/viewer.min.js&quot;&gt;&lt;/script&gt;
&lt;script data-gallery src=&quot;${theme_base!}/assets/media/scripts/gallery.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.18.1/highlight.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/npm/highlightjs-line-numbers.js@2.7.0/dist/highlightjs-line-numbers.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/js/social-share.min.js&quot;&gt;&lt;/script&gt;


&lt;div class=&quot;qr-code-wrap&quot; role=&quot;dialog&quot;&gt;
    &lt;div role=&quot;document&quot; class=&quot;qr-code&quot; style=&quot;transform-origin: 201px 294px;&quot;&gt;
        &lt;span class=&quot;closinglayer&quot;&gt;&lt;svg viewBox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; class=&quot;&quot; data-icon=&quot;close&quot; width=&quot;1em&quot;
                                        height=&quot;1em&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path
                        d=&quot;M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 0 0 203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;
        &lt;/span&gt;
        &lt;div style=&quot;text-align: center;padding: 10px 0;&quot;&gt;
            &lt;#if settings.QR_code_zfb??&gt;
                &lt;img class=&quot;qr_code_zfb&quot; src=&quot;${settings.QR_code_zfb!}&quot;/&gt;
            &lt;/#if&gt;
            &lt;#if settings.QR_code_wx??&gt;
                &lt;img class=&quot;qr_code_wx&quot; src=&quot;${settings.QR_code_wx!}&quot;/&gt;
            &lt;/#if&gt;
        &lt;/div&gt;
        &lt;#if settings.QR_code_zfb?? &amp;&amp; settings.QR_code_wx??&gt;
            &lt;div class=&quot;switch-btn&quot;&gt;
                &lt;span class=&quot;zfb-btn&quot;&gt;支付宝&lt;/span&gt;
                &lt;span class=&quot;wx-btn&quot;&gt;微信&lt;/span&gt;
            &lt;/div&gt;
        &lt;/#if&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;#--目录--&gt;
&lt;#if settings.post_toc!true&gt;
    &lt;script src=&quot;//cdn.jsdelivr.net/npm/tocbot@4.4.2/dist/tocbot.min.js&quot;&gt;&lt;/script&gt;
&lt;/#if&gt;

&lt;script type=&quot;application/javascript&quot;&gt;
    var displayReadProgress = &lt;#if (settings.open_read_progress)??&gt;${settings.open_read_progress?c}&lt;#else&gt;true&lt;/#if&gt;;
&lt;/script&gt;
&lt;script src=&quot;${theme_base!}/assets/media/scripts/post.min.js?ver=${.now?long}&quot;&gt;&lt;/script&gt;
&lt;style&gt;
    /* 阅读进度的进度条颜色 */
    #readProgress .read-progress-bar {
        background: ${settings.progress_color?default('#2474b5')} !important;
        height: 0.1875rem;
    }
&lt;/style&gt;


&lt;#if settings.TimeStatistics??&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        // 建站时间统计
        function show_date_time() {
            if ($(&quot;#span_dt_dt&quot;).length &gt; 0) {
                window.setTimeout(&quot;show_date_time()&quot;, 1000);
                BirthDay = new Date(&quot;${settings.TimeStatistics!}&quot;);
                today = new Date();
                timeold = (today.getTime() - BirthDay.getTime());
                sectimeold = timeold / 1000;
                secondsold = Math.floor(sectimeold);
                msPerDay = 24 * 60 * 60 * 1000;
                e_daysold = timeold / msPerDay;
                daysold = Math.floor(e_daysold);
                e_hrsold = (e_daysold - daysold) * 24;
                hrsold = Math.floor(e_hrsold);
                e_minsold = (e_hrsold - hrsold) * 60;
                minsold = Math.floor((e_hrsold - hrsold) * 60);
                seconds = Math.floor((e_minsold - minsold) * 60);
                span_dt_dt.innerHTML = daysold + &quot;天&quot; + hrsold + &quot;小时&quot; + minsold + &quot;分&quot; + seconds + &quot;秒&quot;;
            }
        }

        show_date_time();
    &lt;/script&gt;
&lt;/#if&gt;

&lt;#if settings.Custom_js_foot??&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        ${settings.Custom_js_foot!}
    &lt;/script&gt;
&lt;/#if&gt;

&lt;#if settings.Custom_js_foot_src??&gt;
    ${settings.Custom_js_foot_src!}
&lt;/#if&gt;

&lt;#if settings.pjax_enabled!false&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/pjax@0.2.8/pjax.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.min.js&quot;&gt;&lt;/script&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.min.css&quot;&gt;

    &lt;script&gt;
        var socialDisabled = '${settings.share_disabeld?default('')}';
        var pjax = new Pjax({
            elements: 'a[href]:not([href^=&quot;#&quot;]):not([data-not-pjax]), form', // default is &quot;a[href], form[action]&quot;
            cacheBust: false,
            debug: false,
            selectors: [
                'title',
                '#page'
            ]
        });

        //在Pjax请求开始后触发
        document.addEventListener('pjax:send', function () {
            NProgress.start();
        });

        //在Pjax请求完成后触发
        document.addEventListener('pjax:complete', function (e) {
            NProgress.done();

            // 加载相册
            if ($(&quot;#page&quot;).find('.photos-page').length &gt; 0) {
                photo.loadGallery();
                // $('script[data-pjax-viewer]').each(function () {
                //     $(this).remove()
                // });
            }

            han.initLazyLoad();
            // 整个页面延迟加载
            han.lazyLoad();

            // card 延迟加载
            han.lazyLoadCardItem()

            //重载
            if (typeof _hmt !== 'undefined') {
                // support 百度统计
                _hmt.push(['_trackPageview', location.pathname + location.search]);
            }
            if (typeof ga !== 'undefined') {
                // support google analytics
                ga('send', 'pageview', location.pathname + location.search);
            }

            // 菜单高亮
            han.highlightMenu();

            // 小屏幕菜单隐藏
            han.makeMenuInvisible();

            //  关闭搜索框
            $(&quot;.search-popup&quot;).velocity(&quot;transition.expandOut&quot;, { duration: 300 });

            // 重新加载 评论
          	loadDisqusJS();

                // 赞赏
                post.appreciate();

                // 初始化toc
                post.initToc()

                // 删除文章第一个 &lt;ul&gt;
                post.removeFirstUL()

                // 目录事件
                post.scrollTocFixed();

                // 搞一个阅读进度，为了提高准确度，数据都要实时获取
                post.readProgress();

                // 代码块
                post.loadHighlight();

                // 按钮事件
                post.appreciateModel()

                // 分享
                post.toggleSocialShare()

                // 图片预览
                post.initViewer()

                // 目录悬浮时间
                post.tocHover();


                try {
                    post.shareIcon()

                    if (renderMathInElement &amp;&amp; typeof renderMathInElement !== 'undefined') {
                        renderMathInElement(document.getElementById('post-content'), katex_config);
                    }

                    if (mermaid &amp;&amp; typeof mermaid !== 'undefined') {
                        mermaid.initialize();
                    }
                } catch (e) {
                    console.log(&quot;error&quot;);
                }
                // 刷新
                han.refreshLazyLoad();
            } else {
                han.initLazyLoad()
            }


        });

        document.addEventListener('pjax:end', function () {

        });

        //Pjax请求失败后触发，请求对象将作为一起传递event.options.request
        document.addEventListener('pjax:error', function () {
            NProgress.done();
            bar('系统出现问题，请手动刷新一次', '3000');
        });
    &lt;/script&gt;
&lt;/#if&gt;


&lt;script type=&quot;text/javascript&quot;&gt;
    //console.clear();
    console.log(&quot;%c 有朋自远方来, 不亦说乎.&quot;, &quot;background:#24272A; color:#ffffff&quot;, &quot;&quot;);
    console.log(&quot;%c Github %c&quot;, &quot;background:#24272A; color:#ffffff&quot;, &quot;&quot;, &quot;https://github.com/hshanx&quot;);
    console.log(&quot;%c 版本号: %c&quot;, &quot;background:#24272A; color:#ffffff&quot;, &quot;&quot;, &quot;1.4.2&quot;);
&lt;/script&gt;


</code></pre>
<p>这样，PJAX只需通过重新加载<code>loadDisqusJS()</code>函数，就可以在加载新页面时刷新评论框。</p>
<p>当然，我上面说的“重新加载”，并不是真正意义上的重载。JavaScript并没有真正意义上的重载函数。我上面的操作主要是用<code>loadDisqusJS()</code>来覆盖<code>loadDisqusJS()</code>，即后面的会覆盖前面的函数。老实说其实还有其他更优雅的方法。但是对于这种需求，上面的方案就足够了，为了避免跑题这里就不展开说了。</p>
<h3 id="嘛还有个小bug">嘛，还有个小Bug</h3>
<p><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/static_files/DisqusJS_Night.webp" alt="DisqusJS_Night" loading="lazy"><br>
<s>我只是演示而已，蝉時雨大佬应该不会介意吧(害怕.webp)。</s></p>
<p>标签的文字和背景颜色融在一起，导致评论里啥都看不清了，这很显然是不行的。解决办法也很简单，在切换模式后重载Disqus就好，我们接下来就解决这个问题。
<h4 id="修改night-modejs">修改night-mode.js</h4>
<p>在<code>assets/scripts/night-mode.js</code>里面将<code>nightMode.click</code>函数里面这些代码注释或者删掉，这些代码是为Halo原生评论系统服务的，目的是为了在切换模式时重载评论框避免上面的情况发生。</p>
<pre><code class="language-javascript">if (typeof renderComment === 'function') {
renderComment();
}
</code></pre>
<p>基于上面的代码逻辑，我们用DisqusJS的话，可以做得更简单，只需换成</p>
<pre><code class="language-javascript">// 重新加载DisqusJS,延时500ms
setTimeout(function(){ loadDisqusJS(); }, 500);
</code></pre>
<p>即可。</p>
<p>修改后的<code>night-mode.js</code>如下</p>
<pre><code class="language-javascript">var nightModeId = 'nightMode';

var darkMode = {
    autoNightMode: function () {

        var nightModes = $('.night-mode');
        var day = new Date();
        var D = day.getHours();
        var isNightMode = hanUtils.getLocalStorage(nightModeId);
        if (D &lt;= nightModeStartTime &amp;&amp; D &gt; nightModeEndTime) {
            // 白天
            if (isNightMode === true) {
                // 是暗黑模式
                darkMode.changeNightMode(nightModes);
                return;
            }
            darkMode.changeLightMode(nightModes);
        } else {
            // 晚上
            if (isNightMode === false) {
                // 不是暗黑模式
                darkMode.changeLightMode(nightModes);
                return;
            }
            darkMode.changeNightMode(nightModes);
        }
        if (typeof renderComment === 'function') {
            renderComment();
        }
    },

    changeLightMode: function (nightModes) {
        $(document.body).removeClass('night');
        for (var i = 0; i &lt; nightModes.length; i++) {
            var nightMode = $(nightModes[i]);
            nightMode.addClass('fa-moon-o');
            nightMode.removeClass('fa-lightbulb-o');
        }
        hanUtils.setLocalStorage(nightModeId, false)
    },

    changeNightMode: function (nightModes) {
        $(document.body).addClass('night');
        for (var i = 0; i &lt; nightModes.length; i++) {
            var nightMode = $(nightModes[i]);
            nightMode.addClass('fa-lightbulb-o');
            nightMode.removeClass('fa-moon-o');
        }
        hanUtils.setLocalStorage(nightModeId, true)
    },

    nightModeFuc: function () {
        var nightModes = $('.night-mode');
        if (!nightModes) {
            return;
        }
        for (var i = 0; i &lt; nightModes.length; i++) {
            var nightMode = $(nightModes[i]);
            darkMode.doFuncNightMode(nightMode);
        }

    },

    doFuncNightMode: function (nightMode) {
        var nightModeBtn = $('.night-mode');
        if ($(document.body).hasClass('night')) {
            nightModeBtn.addClass('fa-lightbulb-o');
            nightModeBtn.removeClass('fa-moon-o');
        } else {
            nightModeBtn.addClass('fa-moon-o');
            nightModeBtn.removeClass('fa-lightbulb-o');
        }


        nightMode.click(function (e) {
            if (nightMode.hasClass('fa-moon-o')) {
                $(document.body).addClass('night');
                nightModeBtn.addClass('fa-lightbulb-o');
                nightModeBtn.removeClass('fa-moon-o');
                hanUtils.setLocalStorage(nightModeId, true);

            } else if (nightMode.hasClass('fa-lightbulb-o')) {
                $(document.body).removeClass('night');
                nightModeBtn.addClass('fa-moon-o');
                nightModeBtn.removeClass('fa-lightbulb-o');

                hanUtils.setLocalStorage(nightModeId, false);
            }
            $(document.body).removeClass('sidebar-opened');
                                              
			// 重新加载DisqusJS
			setTimeout(function(){ loadDisqusJS(); }, 500);
        })
    }
}

$(function () {
// 自动暗黑模式
    darkMode.autoNightMode();

// 暗黑模式
    darkMode.nightModeFuc();

})

</code></pre>
<p>修改好后记得<a href="https://tool.oschina.net/jscompress">压缩代码</a>并覆盖<code>night-mode.min.js</code>里面的内容，不然是不会生效的。因为页面引入的是<code>night-mode.min.js</code>，而不是<code>night-mode.js</code>。<code>night-mode.js</code>只是编辑用的而已。</p>
<h3 id="保存后刷新就好了">保存后刷新就好了</h3>
<p><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/static_files/DisqusJS_Night_Done.webp" alt="DisqusJS_Night_Done" loading="lazy"><br>
<s>也是演示</s></p>
<h5 id="为什么是500毫秒">为什么是500毫秒?</h5>
<p>主要是为了在页面变色完成之前避免遇到DisqusJS抢先加载的情况，当然这里的时间可以调得更短，或者用事件检测器也行。还有开头<code>module/comment.ftl</code>那里的<code>setTimeout(function(){ loadDisqusJS(); }, 2000);</code>也是为了应对这种情况。</p>
<h2 id="关于disqusjs的夜间模式">关于DisqusJS的夜间模式</h2>
<p>又是一个大坑，过几天等我有时间再填吧(咕)。<br>
<img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/static_files/DisqusJS_unDone.webp" alt="DisqusJS_unDone" loading="lazy"></p>
<p>现在DisqusJS的功能是齐全的，包括Disqus的夜间模式。但美中不足的就是DisqusJS的夜间模式还是不行，目前还没有解决办法。暂时只能先禁用夜间模式。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Halo你好，Hexo再见。]]></title>
        <id>https://blog.arn0.org/post/hello-halo/</id>
        <link href="https://blog.arn0.org/post/hello-halo/">
        </link>
        <updated>2020-04-11T10:05:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Hello Halo<br>
如果你看到了这一篇文章，那么证明你已经安装成功了，感谢使用 <a href="https://halo.run">Halo</a> 进行创作，希望能够使用愉快。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Hello Halo<br>
如果你看到了这一篇文章，那么证明你已经安装成功了，感谢使用 <a href="https://halo.run">Halo</a> 进行创作，希望能够使用愉快。</p>
<!--more-->
<h2 id="迁移">迁移</h2>
<p>终于又回到了动态博客的“阵营”，得益于Halo内置迁移工具支持<code>Front-matter</code>格式的MarkDown文档的特性，这次迁移非常顺利。</p>
<p>以前每做一次博客迁移，我都会特地写一篇文章记录下大概的流程和踩过的坑。但这次，真的是非常顺利，想水篇像<a href="https://blog.arn0.org/post/Typecho%E8%BF%81%E7%A7%BB%E5%88%B0Hexo/">typecho迁移到hexo</a>的水文都不知道该怎么写，因为真的是太简单了，鼠标一拖就完事。至于略微复杂的安装流程也没什么坑，该说的<a href="https://ryanc.cc/archives/docker-compose-run-halo">作者的博客</a>都说了，只要照着做就不会遇到麻烦。</p>
<h2 id="我需要的博客系统">我需要的博客系统</h2>
<p>Halo的生态比不上Hexo，但在我眼中，作为一款面向个人的博客系统已经足够好用。因为我需要的仅仅是一个好一点的在线编辑器和能够快速将修改好的文章内容发布出去的框架，仅此而已。毕竟在Hexo里面光是修改一个字就得将所有页面重新渲染一遍，十分蛋疼。而Halo没有这方面的问题，这就是我选择Halo的原因。Hexo很好，只是不适合我而已。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[又换主题了]]></title>
        <id>https://blog.arn0.org/post/change-to-sakura-theme/</id>
        <link href="https://blog.arn0.org/post/change-to-sakura-theme/">
        </link>
        <updated>2020-03-11T10:03:13.000Z</updated>
        <summary type="html"><![CDATA[<p><s>额我为什么要说又?</s></p>
<p>其实这个主题我之前早就用过了，不过当时用的是WordPress版本的，当时还得意洋洋地写了篇<s>狗屁不通的</s><a href="https://blog.arn0.org/post/Unofficial_-%C2%B7-Sakura_Incomplete_Configuration_Tutorial/">教程</a>。之前迁移到Hexo后就换到Suka用了一阵子，就觉得这种简洁风格不太适合我。于是乎就用回了Sakura。</p>
]]></summary>
        <content type="html"><![CDATA[<p><s>额我为什么要说又?</s></p>
<p>其实这个主题我之前早就用过了，不过当时用的是WordPress版本的，当时还得意洋洋地写了篇<s>狗屁不通的</s><a href="https://blog.arn0.org/post/Unofficial_-%C2%B7-Sakura_Incomplete_Configuration_Tutorial/">教程</a>。之前迁移到Hexo后就换到Suka用了一阵子，就觉得这种简洁风格不太适合我。于是乎就用回了Sakura。</p>
<!--more-->
<p><a href="https://github.com/honjun/hexo-theme-sakura/">Hexo版本的Sakura</a>是从<a href="https://github.com/mashirozx/Sakura/">WordPress版本的Sakura</a>移植过来的，很多东西都在。要说有啥不一样，无非就是底部评论不同。</p>
<p><cent>WordPress版本:</cent></p>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/static_files/WordPressSakuraComment.webp" alt="WordPressSakura" loading="lazy"></figure>
<hr>
<p><cent>Hexo版本:</cent></p>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/static_files/HexoSakura.webp" alt="HexoSakura" loading="lazy"></figure>
<p>嘛，可以看到WordPress版本的Sakura是WP的评论系统，而Hexo版本的Sakura是基于Valine实现的，东西其实少了些的，比如评论图片支持、数据自托管等，不过这些都无伤大雅，能正常用就很好。目前主题作者还在更新版本，期待后续更新......</p>
<hr>
<blockquote>
<p>3月15日更新：</p>
</blockquote>
<p>今天想将评论换成DisqusJS，但在修修改改的过程中发现这主题对我等菜鸡不太友好，而且<a href="https://statics.1024tools.com/css/markdown/github.css">代码框样式</a>还直接504了,在网上还一时半会找不到这个代码框样式。所以只能灰溜溜地退回Suka了。QAQ</p>
<p>嘛，其实Suka还算挺好的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[服务器部署Hexo-admin]]></title>
        <id>https://blog.arn0.org/post/服务器部署Hexo-admin/</id>
        <link href="https://blog.arn0.org/post/服务器部署Hexo-admin/">
        </link>
        <updated>2020-03-10T10:04:05.000Z</updated>
        <summary type="html"><![CDATA[<p>之前试了一下用<a href="https://arn0note.github.io/post/%E4%BD%BF%E7%94%A8CMS%E7%AE%A1%E7%90%86Hexo%E6%96%87%E7%AB%A0/">Netlify托管我的Hexo博客</a>，但用着感觉不太顺心。所以就试着直接用HexoAdmin来管理文章。虽说Netlify有可视化的编辑器，手机也可以打开，但是因为那个编辑器并没有自适应页面大小，手机访问直接给你怼个大页面，找个按钮都要比划半天……</p>
]]></summary>
        <content type="html"><![CDATA[<p>之前试了一下用<a href="https://arn0note.github.io/post/%E4%BD%BF%E7%94%A8CMS%E7%AE%A1%E7%90%86Hexo%E6%96%87%E7%AB%A0/">Netlify托管我的Hexo博客</a>，但用着感觉不太顺心。所以就试着直接用HexoAdmin来管理文章。虽说Netlify有可视化的编辑器，手机也可以打开，但是因为那个编辑器并没有自适应页面大小，手机访问直接给你怼个大页面，找个按钮都要比划半天……</p>
<!--more-->
<p>所以用手机操作那就非常蛋疼了。虽然PC端体验还行，但是我手边又不是经常有电脑，于是乎就直接将HexoAdmin部署到服务器上了，毕竟HexoAdmin有自适应的页面，手机也可以愉快玩耍。用了几天感觉海星。</p>
<h2 id="安装hexoadmin">安装HexoAdmin</h2>
<p>cd 到hexo的根目录，然后安装<code>hexo-admin</code></p>
<pre><code class="language-bash">npm i hexo-admin --save
</code></pre>
<h2 id="部署">部署</h2>
<p>安装pm2</p>
<pre><code class="language-bash">npm i -g pm2
</code></pre>
<h3 id="创建runjs">创建run.js</h3>
<pre><code class="language-javascript">const { exec } = require('child_process')
exec('hexo server -p 4000 -d &amp; ',(error, stdout, stderr) =&gt; {
	if(error){
                console.log('exec error: ${error}')
                return
        }
        console.log('stdout: ${stdout}');
        console.log('stderr: ${stderr}');
})
</code></pre>
<h3 id="创建pm2任务">创建pm2任务</h3>
<pre><code class="language-bash">pm2 start ./run.js --name HexoBlog
pm2 save
</code></pre>
<h2 id="配置webserver反向代理">配置WebServer反向代理</h2>
<h3 id="安装caddy">安装Caddy</h3>
<pre><code class="language-bash">curl https://getcaddy.com | bash -s personal tls.dns.cloudflare
</code></pre>
<p>我在这里强烈建议在这个服务器上套一个Cloudflare CDN。所以安装的Caddy会附带一个cloudflare插件。</p>
<p>嘛，如果不想要这个插件的话，可以将<code>tls.dns.cloudflare</code>删掉。</p>
<h3 id="创建caddy-file">创建Caddy File</h3>
<p>创建并编辑<code>/etc/caddy.conf</code></p>
<pre><code class="language-conf">examples.com
{
        proxy / localhost:4000
        tls {
			dns cloudflare
		}

        basicauth username password {
                realm &quot;xxx's documents&quot;
                /admin
        }
}
</code></pre>
<h4 id="注意">注意</h4>
<p><code>examples.com</code>改为你自己的域名<br>
<code>basicauth</code>那里的<code>username</code>和<code>password</code>分别改为你想要设置的页面访问用户名和密码<br>
如果你不喜欢web server的basicauth的话，可以将上面的<code>basicauth</code>去掉，直接用<a href="https://github.com/jaredly/hexo-admin#4-password-protection">Hexo-admin自带的Authentification</a>。<br>
<code>realm</code>后面的是登陆对话框的提示内容，这里随意修改。</p>
<p>如果你不打算套Cloudflare CDN的话，可以将下面部分去掉。</p>
<pre><code class="language-conf">tls {
	dns cloudflare
}
</code></pre>
<h3 id="创建systemd服务">创建Systemd服务</h3>
<p>创建<code>/etc/systemd/system/caddy.service</code><br>
添加下面的内容</p>
<pre><code>[Unit]
Description=Caddy HTTP/2 web server
After=syslog.target
After=network.target

[Service]
User=root
Group=root
LimitNOFILE=64000
Environment=CLOUDFLARE_EMAIL=你注册Cloudflre的邮箱
Environment=CLOUDFLARE_API_KEY=你的Cloudflare Global API Key
ExecStart=/usr/local/bin/caddy --conf=/etc/caddy.conf
Restart=on-failure

[Install]
WantedBy=multi-user.target
</code></pre>
<h4 id="注意-2">注意</h4>
<p>两行<code>Environment</code>需要根据实际情况更改。如果你不打算套Cloudflare CDN的话，可以将这两行去掉.</p>
<p>这里将用户名指定成root主要是为了方便使用80和443端口。如果觉得不安全，可以参考<a href="https://github.com/abiosoft/caddy-docker/issues/106#issuecomment-547846209">Use a user, not root, to run caddy #106</a>，但是要用到Docker。</p>
<h3 id="激活systemd-service">激活Systemd service</h3>
<pre><code class="language-bash">sudo systemctl enable caddy.service
</code></pre>
<h2 id="禁止从外网直接访问hexo-admin可选">禁止从外网直接访问hexo-admin(可选）</h2>
<pre><code class="language-bash">iptables -A INPUT -s 127.0.0.1 -p tcp --dport 4000 -j ACCEPT
</code></pre>
<p>如果用的是GCP，并且套了Cloudflare的CDN，那么还可以直接用GCP的防火墙规则。<br>
参考[GCP 防火墙只允许CDN IP访问 保护原站](https://blog.arn0.org/post/GCP 防火墙只允许CDN IP访问 保护源站/)</p>
<h2 id="配置deploy">配置deploy</h2>
<p>创建<code>hexo-deploy.sh</code>文件</p>
<pre><code class="language-bash">#!/usr/bin/env sh
make up
</code></pre>
<p>在hexo根木录下的_config.yml添加</p>
<pre><code class="language-yaml">admin:
	deployCommand: './hexo-deploy.sh'
</code></pre>
<p>HexoAdmin的deploy功能需要依赖hexo-deployer-git，这里安装一下</p>
<pre><code class="language-bash">npm install hexo-deployer-git --save
</code></pre>
<p>接下来创建<code>Makefile</code>,添加下面内容</p>
<pre><code class="language-makefile">up:
                hexo d -g
                git add *
                git commit -m &quot;update blog&quot;
                git push origin hexo-source
sync:
                npm i
                sudo npm install -g hexo-cli --ignore-scripts
</code></pre>
<h4 id="注意-3">注意</h4>
<p>up部分第4行决定了Git推送Hexo所有文件到哪个分支，具体要根据你的需要做些修改。</p>
<h3 id="安装make">安装make</h3>
<p>Debian/Ubuntu:</p>
<pre><code class="language-bash">apt install make
</code></pre>
<p>CentOS/Redhat:</p>
<pre><code class="language-bash">yum install make
</code></pre>
<h2 id="最后启动caddy服务">最后启动Caddy服务</h2>
<pre><code class="language-bash">systemctl start caddy
</code></pre>
<h2 id="大功告成">大功告成</h2>
<p>访问你的域名/admin就会直接弹窗要求登陆<br>
<img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/static_files/hexo-admin-login.webp" alt="" loading="lazy"></p>
<p>点击deploy就会自动部署Hexo<br>
<img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/static_files/hexo-deploy.webp" alt="" loading="lazy"></p>
<blockquote>
<p>PS: 在这里我是将Github仓库当作备份快照了，没有用到Github的Pages服务。还有我并没有将Hexo-admin的服务部署在这个博客的Web服务器上，而是另外开了台VPS来作为后端服务器，为的就是减轻这个Web服务器的负担，~~虽然这个破站根本就没有人访问。~~同时为了避免在自己电脑上写完文章后无法同步到后端服务器，在部署完Hexo-admin后我还设置了一下WebHooks，用来同步所有文件改动，设置WebHooks的方法可以看[我之前的文章](https://blog.arn0.org/post/Hexo 部署到自己的服务器/)。</p>
</blockquote>
<hr>
参考链接
<p><a href="http://goingmerry.cn/2019/10/22/Hexo-admin%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/">Hexo-admin服务器部署</a></p>
<p><a href="https://voidalex.one/2018/02/19/%E4%B8%80%E7%A7%8D%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%80%9D%E8%B7%AF/">一种在服务器上部署Hexo博客的思路</a></p>
<p><a href="https://www.wevg.org/archives/hexo-with-netlify-cms">给你的 Hexo 博客添加 CMS</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Travis部署Hexo]]></title>
        <id>https://blog.arn0.org/post/Travis部署Hexo/</id>
        <link href="https://blog.arn0.org/post/Travis部署Hexo/">
        </link>
        <updated>2020-02-19T10:02:12.000Z</updated>
        <summary type="html"><![CDATA[<p>最近实在是无聊了,开始花式瞎折腾Hexo<s>的那些被玩剩下的玩法</s>，于是乎又水了一篇。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近实在是无聊了,开始花式瞎折腾Hexo<s>的那些被玩剩下的玩法</s>，于是乎又水了一篇。</p>
<!--more-->
<h1 id="准备工作">准备工作</h1>
<h2 id="要求">要求</h2>
<ul>
<li>有一个Github账户</li>
<li>在Github拥有一个属于你的仓库</li>
</ul>
<h2 id="确保你有gh-pages分支">确保你有<code>gh-pages</code>分支</h2>
<pre><code class="language-sh">git checkout master
git checkout --orphan gh-pages
git push origin -u gh-pages
git checkout master
</code></pre>
<h2 id="安装hexo-deployer-git">安装Hexo-deployer-git</h2>
<pre><code class="language-sh">npm install hexo-deployer-git --save
</code></pre>
<h2 id="创建github-api-token">创建Github API token</h2>
<p><a href="https://github.com/settings/tokens/new">点击这条链接</a>创建一个新的token，这里需要输入一次密码。</p>
<p>这里只需要<code>repo</code>权限,如果你的仓库是公开的，那直接勾选<code>public_repo</code>就行。<br>
<img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/static_files/Github-token.webp" alt="Github-token" loading="lazy"></p>
<p>最后点击页面最下方的Generate token就生成了新的Token了。</p>
<p>Token只会显示一次，你退出页面/刷新那就直接隐藏掉了。所以先别关掉这个页面，等下还要用到。</p>
<h1 id="设置travis">设置Travis</h1>
<p>前面废话了这么多，现在我们开始设置<code>.travis.yml</code></p>
<p>创建<code>.travis.yml</code>并输入以下内容</p>
<pre><code class="language-sh">language: node_js
node_js:
  - &quot;v12.15.0&quot;
install:
  - npm install
script:
  - sed -i &quot;s/GH_TOKEN/${GH_TOKEN}/g&quot; _config.yml || exit 1
  - hexo d -g
after_success:
  - test $TRAVIS_PULL_REQUEST == &quot;false&quot; &amp;&amp; test $TRAVIS_BRANCH == &quot;master&quot; &amp;&amp; bash deploy.sh
env:
  global:
    - secure: $GH_TOKEN
</code></pre>
<p>再创建<code>deploy.sh</code>并输入以下内容</p>
<pre><code class="language-sh">#!/bin/bash

set -o errexit -o nounset

if [ &quot;$TRAVIS_BRANCH&quot; != &quot;master&quot; ]
then
  echo &quot;This commit was made against the $TRAVIS_BRANCH and not the master! No deploy!&quot;
  exit 0
fi

rev=$(git rev-parse --short HEAD)

cd stage/_book

git init
git config user.name &quot;你的用户名&quot;
git config user.email &quot;你的github邮箱&quot;

git remote add upstream https://$GH_TOKEN@你自己的仓库地址
git fetch upstream
git reset upstream/gh-pages

echo &quot;你的域名&quot; &gt; CNAME

touch .

git add -A .
git commit -m &quot;rebuild pages at ${rev}&quot;
git push -q upstream HEAD:gh-pages

</code></pre>
<p>上面有4个地方要根据你自己的情况进行修改</p>
<ul>
<li>git config user.name &quot;你的用户名&quot;</li>
<li>git config user.email &quot;你的github邮箱&quot;</li>
<li>echo &quot;你的域名&quot; &gt; CNAME</li>
<li>git remote add upstream &quot;https://$GH_TOKEN@你自己的仓库地址，去掉https://&quot;</li>
</ul>
<p>并且在Hexo主配置文件<code>_config.yml</code>里面增加以下内容</p>
<pre><code class="language-yaml">deploy:
  type: git
  repo: https://GH_TOKEN@你自己的仓库地址，去掉https://
  branch: gh-pages
</code></pre>
<p>这里也有一个地方要修改:</p>
<ul>
<li>repo: https://GH_TOKEN@改为你自己的仓库地址，去掉https://</li>
</ul>
<p>改好后用Github账户登陆<a href="https://travis-ci.org/">Travis</a>，根据提示将项目同步到Travis。</p>
<p>然后点击Setting</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/static_files/travis_setting.webp" alt="travis_setting" loading="lazy"></figure>
<p>设置一个<code>GH_TOKEN</code>变量，将之前提到的Github Token填到VALUE，最后点击ADD。<br>
<img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/static_files/travis_var1.webp" alt="travis_var1" loading="lazy"></p>
<p>然后将本地仓库推送到Github</p>
<pre><code class="language-sh">git add .travis.yml deploy.sh *
git commit -m &quot;init hexo&quot;
git push origin master
</code></pre>
<h2 id="部署成功">部署成功</h2>
<p>没有意外的话，等几分钟后，在你的Travis项目页上就会看到部署成功的提示<br>
<img src="https://cdn.jsdelivr.net/gh/arn0blog/res@master/static_files/hexo_travis_done.webp" alt="" loading="lazy"><br>
以后写完文章后只要将master分支推送到Github，Travis就会自动帮你部署静态内容到Github Pages了。</p>
<hr>
<p>参考链接：</p>
<p><a href="https://github.com/steveklabnik/automatically_update_github_pages_with_travis_example">Automatically Update Github Pages with Travis</a></p>
<p><a href="https://docs.travis-ci.com/user/tutorial/">Travis CI Tutorial</a></p>
]]></content>
    </entry>
</feed>